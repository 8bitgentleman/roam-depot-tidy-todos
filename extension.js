var r={694:(r,n,e)=>{e.d(n,{Z:()=>s});var o=e(81),t=e.n(o),a=e(645),l=e.n(a)()(t());l.push([r.id,':root{\r\n  --progress-bar-default:#137cbd;\r\n  --progress-bar:#137cbd;\r\n  --progress-border:#B6B6B6;\r\n  --progress-bg:#dfe2e5;\r\n}\r\n:root .rm-dark-theme {\r\n  --progress-border:#137cbd;\r\n  --progress-bg:#EFEFEF;\r\n}\r\n/* THIS CODEBLOCK IS OVERWRITTEN ON EVERY VERSION UPDATE\r\nDO NOT MODIFY*/\r\nprogress[name="percent-done"],\r\n.todo-progress-bar progress{\r\n  display:inline-block;\r\n  height:6px;\r\n  background:none;\r\n  border-radius: 15px;\r\n  margin-bottom:2px;\r\n}\r\n  \r\nprogress::-webkit-progress-bar,\r\n.todo-progress-bar progress::-webkit-progress-bar{\r\n  height:6px;\r\n  background-color: var(--progress-bg);\r\n  border-radius: 15px;\r\n}\r\n\r\n.rm-dark-theme progress::-webkit-progress-bar,\r\n.rm-dark-theme .todo-progress-bar progress::-webkit-progress-bar{\r\nbox-shadow:0px 0px 6px var(--progress-border) inset;\r\n}\r\n\r\nprogress::-webkit-progress-value,\r\n.todo-progress-bar progress::-webkit-progress-value{\r\n  display:inline-block;\r\n  float:left;\r\n  height:6px;\r\n  margin:0px -10px 0 0;\r\n  background: var(--progress-bar);\r\n  border-radius: 5px;\r\n}',""]);const s=l},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,o,t,a){"string"==typeof r&&(r=[[null,r,void 0]]);var l={};if(o)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(l[i]=!0)}for(var d=0;d<r.length;d++){var c=[].concat(r[d]);o&&l[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),t&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=t):c[4]="".concat(t)),n.push(c))}},n}},81:r=>{r.exports=function(r){return r[1]}},923:r=>{r.exports='(ns progress-bar-v11\r\n  (:require\r\n   [reagent.core :as r]\r\n   [datascript.core :as d]\r\n   [roam.datascript.reactive :as dr]\r\n   [clojure.pprint :as pp]))\r\n\r\n; THIS CODEBLOCK IS OVERWRITTEN ON EVERY VERSION UPDATE\r\n; DO NOT MODIFY\r\n\r\n(defn flatten-block \r\n  "Flattens a blocks children into a flat list"\r\n  [acc block]\r\n  (reduce flatten-block\r\n          (conj acc (dissoc block :block/children))\r\n          (:block/children block)))\r\n\r\n(defn find-child-refs\r\n  "Returns all _refs for children blocks given a parent block uid"\r\n  [block-uid]\r\n  (flatten-block []\r\n             @(dr/q \'[:find (pull ?e [:block/refs{:block/children ...}]) .\r\n                      :in $ ?uid\r\n                      :where\r\n                      [?e :block/uid ?uid]]\r\n                    block-uid)))\r\n\r\n(defn id-title \r\n  "Gets a page\'s title from its db id"\r\n  [id]\r\n  (:node/title @(dr/pull \'[:node/title] id))\r\n  )\r\n\r\n(defn info-from-id [id]\r\n  \t(or (:node/title @(dr/pull \'[:node/title] id))\r\n      (map\r\n       id-title \r\n       (map \r\n       \t\t:db/id\r\n       \t\t(:block/refs @(dr/pull \'[:block/refs] id))\r\n       ))\r\n      )\r\n  )\r\n\r\n(defn count-occurrences \r\n  "Counts the occurances of a string in a list"\r\n  [s slist]\r\n  (->> slist\r\n       flatten\r\n       (filter #{s})\r\n       count))\r\n\r\n\r\n(defn recurse-search\r\n  "Recursivly search through a block\'s children for all pages referenced"\r\n  [block-uid]\r\n  (->> block-uid\r\n       (find-child-refs)\r\n       (map :block/refs)\r\n       (flatten)\r\n       (map :db/id)\r\n       (map  info-from-id)\r\n       (flatten)))\r\n\r\n\r\n(defn main [{:keys [block-uid]} & args]\r\n  (let [tasks (r/atom {;; don\'t love that I do this search twice\r\n                       :todo (count-occurrences "TODO" (recurse-search block-uid))\r\n                       :done (count-occurrences "DONE" (recurse-search block-uid))} )]\r\n    \r\n      [:div\r\n             [:div {:style {:display "flex"\r\n                                 :align-items "center"}\r\n                         }\r\n                   [:span [:progress {\r\n                      :id "file"\r\n                      :name "percent-done"\r\n                      :value (:done @tasks)\r\n                      :max (+ (:todo @tasks) (:done @tasks))\r\n                      :style{\r\n\r\n                             :margin-left "10px"\r\n                             :margin-right "10px"\r\n                             }}]\r\n                    ]\r\n                    [:span [:div  (str (:done @tasks)  "/"\r\n                                      (+ \r\n                                        (:done @tasks)\r\n                                        (:todo @tasks))\r\n                                    " Done"\r\n                                    )]]\r\n\r\n                   ]\r\n           ]\r\n  ))'}},n={};function e(o){var t=n[o];if(void 0!==t)return t.exports;var a=n[o]={id:o,exports:{}};return r[o](a,a.exports,e),a.exports}e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var o in n)e.o(n,o)&&!e.o(r,o)&&Object.defineProperty(r,o,{enumerable:!0,get:n[o]})},e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n);var o={};(()=>{e.d(o,{Z:()=>g});var r=e(694),n=e(923),t=e.n(n);const a="roam-render-todo-progress-cljs",l="roam-render-todo-progress-css";function s(r){roamAlphaAPI.deleteBlock({block:{uid:r}})}function i(){let r=new Date(Date.now());return window.roamAlphaAPI.util.dateToPageTitle(r)}function d(r){let n=roamAlphaAPI.util.generateUID();return roamAlphaAPI.data.page.create({page:{title:r,uid:n}}),n}function c(r){return roamAlphaAPI.q(`[:find (pull ?e [:block/uid]) :where [?e :node/title "${r}"]]`)?.[0]?.[0].uid||null}function p(r){if(1==r){let r=`[:find\n            (pull ?node [:block/string :node/title :block/uid])\n        :where\n            (or [?node :block/string ?node-String]\n        [?node :node/title ?node-String])\n            [(clojure.string/includes? ?node-String "{{[[roam/render]]:((${a}))}}")]\n        ]`,n=`{{[[roam/render]]:((${a}))}}`,e="{{todo-progress-bar}}";window.roamAlphaAPI.q(r).flat().forEach((r=>{const o=r.string.replace(n,e);window.roamAlphaAPI.updateBlock({block:{uid:r.uid,string:o}})}))}else if(0==r){let r="{{todo-progress-bar}}",n=`[:find\n            (pull ?node [:block/string :node/title :block/uid])\n        :where\n            (or [?node :block/string ?node-String]\n        [?node :node/title ?node-String])\n            [(clojure.string/includes? ?node-String "${r}")]\n        ]`,e=`{{[[roam/render]]:((${a}))}}`;window.roamAlphaAPI.q(n).flat().forEach((n=>{const o=n.string.replace(r,e);window.roamAlphaAPI.updateBlock({block:{uid:n.uid,string:o}})}))}}function u(n){let e="roam-render-todo-progress",o="todo-progress-css-parent";1==n?(function(r,n){let e=c(r)||d(r),o=roamAlphaAPI.util.generateUID(),l=roamAlphaAPI.util.generateUID(),s=roamAlphaAPI.util.generateUID();roamAlphaAPI.createBlock({location:{"parent-uid":e,order:0},block:{string:`TODO Progress Bar [[${i()}]]`,uid:n,open:!0,heading:3}}),roamAlphaAPI.createBlock({location:{"parent-uid":n,order:0},block:{string:"TODO Progress Bar v11 [[roam/templates]]",uid:o,open:!0}}),roamAlphaAPI.createBlock({location:{"parent-uid":o,order:0},block:{string:`{{[[roam/render]]:((${a}))}}`,uid:s}}),roamAlphaAPI.createBlock({location:{"parent-uid":n,order:"last"},block:{string:"code",uid:l,open:!1}});let p="```clojure\n "+t()+" ```";roamAlphaAPI.createBlock({location:{"parent-uid":l,order:0},block:{uid:a,string:p}})}("roam/render",e),function(n){let e=c("roam/css")||d("roam/css");roamAlphaAPI.createBlock({location:{"parent-uid":e,order:"last"},block:{string:`TODO PROGRESS BAR STYLE [[${i()}]]`,uid:n,open:!1,heading:3}});let o="```css\n "+r.Z.toString()+" ```";roamAlphaAPI.createBlock({location:{"parent-uid":n,order:0},block:{uid:l,string:o}})}(o)):0==n&&(p(!0),s(e),s(o))}const g={onload:function({extensionAPI:n}){roamAlphaAPI.data.pull("[*]",[":block/uid","roam-render-todo-progress"])?(function(){let n="```css\n "+r.Z.toString()+" ```";roamAlphaAPI.updateBlock({block:{uid:l,string:n}})}(),function(){let r="```clojure\n "+t()+" ```";roamAlphaAPI.updateBlock({block:{uid:a,string:r}})}(),p(!1)):u(!0),console.log("load todo progress bar plugin")},onunload:function(){console.log("unload todo progress bar plugin"),u(!1)}}})();var t=o.Z;export{t as default};